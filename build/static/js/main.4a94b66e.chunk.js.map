{"version":3,"sources":["component/layout/Layout.module.css","redux/actions/types.ts","redux/actions/login.ts","redux/actions/project.ts","redux/reducers/login.ts","redux/reducers/index.ts","redux/reducers/users.ts","redux/reducers/project.ts","redux/reducers/task.ts","component/layout/MainHeader.tsx","component/layout/Layout.tsx","component/Login.tsx","component/UserHomeComponent.tsx","component/layout/SideBar.tsx","pages/Home.tsx","pages/AdminAllUsers.tsx","redux/actions/users.ts","component/Signup.tsx","pages/UserTasks.tsx","pages/NewProject.tsx","pages/NewTask.tsx","pages/AdminAllProjects.tsx","pages/AdminAllTasks.tsx","redux/actions/task.ts","application.tsx","index.tsx","component/layout/MainHeader.module.css"],"names":["module","exports","ActionTypes","loginUser","user","dispatch","a","console","log","axios","post","localDBUrl","resp","sessionStorage","setItem","JSON","stringify","data","getItem","type","login","payload","logoutUser","clear","user_id","email","firstname","lastname","password","profpic","userRole","username","logout","fetchAllProjects","get","fetchaAllProjects","reducers","combineReducers","users","state","action","fetchaAllUsers","userLogin","toString","project","task","fetchaAllTasks","MainHeader","connect","props","navigate","useNavigate","useEffect","logged","setLogged","className","classes","header","navData","isActive","active","to","onClick","Layout","useState","main","children","Login","setUsername","setPassword","warning","setWarning","onSubmit","e","preventDefault","value","onChange","target","required","UserHomeComponent","setEmail","setFirstname","setLastname","setUserRole","updateUser","put","src","alt","name","disabled","placeholder","event","defaultValue","SideBar","updateClickedPage","sidebar","setSidebar","showSidebar","Provider","color","Home","sideBarContent","AdminAllUsers","fetchAllUsers","setUser_id","setProfpic","renderPic","CardGroup","Row","xs","md","lg","map","Col","Card","style","width","Img","variant","Body","Title","Text","Button","setUserToUpdateState","Signup","signUpUser","UserTasks","task_note","setTask_note","finsh","setFinish","taskToFinish","task_description","task_end_date","task_id","task_start_date","finishTask","onClickFetchUserProjectsAndTasks","user_projects","project_name","start_project_date","end_project_date","project_id","user_tasks","Subtitle","NewProject","setProject_name","Date","startDate","setStartDate","endDate","setEndtDate","saveProject","temp","closeOnScroll","selected","date","NewTask","setTask_description","setTask_start_date","setTask_end_date","saveTask","AdminAllProjects","setProject_id","updateProject","parse","setProjectToUpdateState","AdminAllTasks","fetchAllTasks","setTask_id","updateTask","setTaskToUpdateState","Application","path","element","replace","store","createStore","compose","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4a94b66e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"sideBarContent\":\"Layout_sideBarContent__1gJiu\",\"auth-wrapper\":\"Layout_auth-wrapper__f07Dm\",\"auth-inner\":\"Layout_auth-inner__3W5pN\",\"form-control\":\"Layout_form-control__1y88P\"};","import {FetchAllUsersAction} from \"./users\";\r\nimport {LoginUserAction, LogoutUserAction} from \"./login\";\r\nimport {FetchAllProjectsAction} from \"./project\";\r\nimport {FetchAllTasksAction} from \"./task\";\r\n\r\nexport enum ActionTypes{\r\n    fetchaAllUsers,\r\n    login,\r\n    logout,\r\n    fetchaAllProjects,\r\n    fetchaAllTasks\r\n\r\n}\r\n\r\nexport type Action = FetchAllUsersAction | LoginUserAction | LogoutUserAction\r\n    | FetchAllProjectsAction |FetchAllTasksAction;\r\n","import axios from \"axios\";\r\nimport {Dispatch} from \"redux\";\r\nimport {ActionTypes} from \"./types\";\r\nimport {User} from \"./users\";\r\n\r\nconst urlApi = `http://52.14.40.145:8080/api/users/all` ;\r\nconst localDBUrl = `http://localhost:8090/api/users/`;\r\n\r\nexport interface LoginUserAction{\r\n    type: ActionTypes.login;\r\n    payload: User;\r\n}\r\nexport interface LogoutUserAction{\r\n    type: ActionTypes.logout;\r\n    payload: User;\r\n\r\n}\r\nexport interface LoginType{\r\n    username:string;\r\n    password:string;\r\n}\r\n\r\nexport const loginUser = (user:LoginType) => {\r\n    return async (dispatch: Dispatch) => {\r\n        console.log(\"In the Action Login !!!\"+user)\r\n        const resp = await axios.post<User>(localDBUrl+\"login\",user)\r\n        sessionStorage.setItem(\"currentUser\", JSON.stringify(resp.data))\r\n        sessionStorage.setItem(\"logged\", \"true\")\r\n        console.log(sessionStorage.getItem(\"currentUser\"))\r\n        dispatch<LoginUserAction>({\r\n            type: ActionTypes.login,\r\n            payload: resp.data\r\n        })\r\n    }\r\n}\r\nexport const logoutUser = () => {\r\n    sessionStorage.clear()\r\n    let user :User = {\r\n        user_id: 0,\r\n        email: \"\",\r\n        firstname: \"\",\r\n        lastname : \"\",\r\n        password : \"\",\r\n        profpic  : \"\",\r\n        userRole: \"\",\r\n        username : \"\"\r\n    }\r\n    return (dispatch: Dispatch) => dispatch<LogoutUserAction>({\r\n        type: ActionTypes.logout,\r\n        payload: user\r\n\r\n    })\r\n}","import axios from \"axios\";\r\nimport {Dispatch} from \"redux\";\r\nimport {ActionTypes} from \"./types\";\r\n\r\n//const urlApi = `http://52.14.40.145:8080/api/project/all` ;\r\nconst localDBUrl = `http://localhost:8090/api/project/all`;\r\n\r\nexport interface Project{\r\n    project_id: number;\r\n    project_name: string;\r\n    start_project_date: string;\r\n    end_project_date : string;\r\n}\r\nexport interface FetchAllProjectsAction{\r\n    type: ActionTypes.fetchaAllProjects;\r\n    payload: Project[];\r\n}\r\n\r\nexport const fetchAllProjects = () => {\r\n    return async (dispatch: Dispatch) => {\r\n        const resp = await axios.get<Project[]>(localDBUrl)\r\n        dispatch<FetchAllProjectsAction>({\r\n            type: ActionTypes.fetchaAllProjects,\r\n            payload: resp.data\r\n        })\r\n    }\r\n}","import {User, ActionTypes, Action} from \"../actions\";\r\n\r\nlet user :User = {\r\n    user_id: 0,\r\n    email: \"\",\r\n    firstname: \"\",\r\n    lastname : \"\",\r\n    password : \"\",\r\n    profpic  : \"\",\r\n    userRole: \"\",\r\n    username : \"\"\r\n}\r\n\r\n\r\nexport const loginReducer = (state:User = user, action: Action) => {\r\n    console.log(\"In the LoginReduce With action \"+ user + action.type.toString)\r\n    switch (action.type) {\r\n        case ActionTypes.login:\r\n            return action.payload;\r\n        case ActionTypes.logout:\r\n            console.log(\"IN the Logout Reduces before changing the state!!\")\r\n            return action.payload;\r\n        default:\r\n            return state;\r\n    }\r\n}","import {combineReducers} from \"redux\";\r\nimport {usersReducer} from \"./users\";\r\nimport {Project, Task, User} from \"../actions\";\r\nimport {loginReducer} from \"./login\";\r\nimport {projectReducer} from \"./project\";\r\nimport {taskReducer} from \"./task\";\r\n\r\nexport interface StoreState{\r\n    users: User[];\r\n    userLogin: User;\r\n    project: Project[];\r\n    task : Task[]\r\n\r\n}\r\n\r\nexport const reducers = combineReducers<StoreState>({\r\n    users: usersReducer,\r\n    userLogin: loginReducer,\r\n    project: projectReducer,\r\n    task: taskReducer\r\n});","import {User, ActionTypes, Action} from \"../actions\";\r\n\r\nexport const usersReducer = (state: User[] = [], action: Action) => {\r\n    switch (action.type) {\r\n        case ActionTypes.fetchaAllUsers:\r\n            return action.payload;\r\n        default:\r\n            return state;\r\n    }\r\n}","import {Project, ActionTypes, Action} from \"../actions\";\r\n\r\nexport const projectReducer = (state: Project[] = [], action: Action) => {\r\n    switch (action.type) {\r\n        case ActionTypes.fetchaAllProjects:\r\n            return action.payload;\r\n        default:\r\n            return state;\r\n    }\r\n}","import {Task, ActionTypes, Action} from \"../actions\";\r\n\r\nexport const taskReducer = (state: Task[] = [], action: Action) => {\r\n    switch (action.type) {\r\n        case ActionTypes.fetchaAllTasks:\r\n            return action.payload;\r\n        default:\r\n            return state;\r\n    }\r\n}","import {NavLink, useNavigate} from \"react-router-dom\";\r\nimport classes from './MainHeader.module.css';\r\nimport React, {useEffect, useState} from \"react\";\r\nimport {loginUser, logoutUser, User} from \"../../redux/actions\";\r\nimport {StoreState} from \"../../redux/reducers\";\r\nimport {connect} from \"react-redux\";\r\n\r\ninterface MainHeaderProps {\r\n    userLogin: User;\r\n    logged: boolean;\r\n    setLogged: any;\r\n    logoutUser: Function;\r\n}\r\n\r\nconst _MainHeader: React.FunctionComponent<MainHeaderProps> = props => {\r\n    const navigate = useNavigate();\r\n\r\n    useEffect(() => {\r\n        if (props.logged) {\r\n            navigate(\"/login\");\r\n        }\r\n        if (props.userLogin.user_id !== 0) {\r\n            props.setLogged(true);\r\n            navigate(\"/home\");\r\n        }\r\n    }, [props.userLogin])\r\n\r\n    const onClickLogoutUser = () => {\r\n        logoutUser();\r\n        props.setLogged(false);\r\n\r\n    }\r\n\r\n    return (\r\n        <header className={classes.header}>\r\n            <nav> {console.log(props.logged)}\r\n                <ul>\r\n                    <li>{props.logged ?\r\n                        <NavLink className={(navData) => (navData.isActive ? classes.active : '')} to='/home'>\r\n                            Home\r\n                        </NavLink> :\r\n                        <NavLink className={(navData) => (navData.isActive ? classes.active : '')} to='/login'>\r\n                            Login\r\n                        </NavLink>}\r\n                    </li>\r\n                    {!props.logged ?\r\n                        <li><NavLink className={(navData) => (navData.isActive ? classes.active : '')} to='/signup'>\r\n                            SignUp\r\n                        </NavLink>\r\n                        </li>: \"\"}\r\n                    {props.userLogin.userRole ===\"ADMIN\" && props.logged ?<li><NavLink className={(navData) => (navData.isActive ? classes.active : '')} to='/admin_all_users'>\r\n                        Admin Users\r\n                    </NavLink>\r\n                    </li>: \"\"}\r\n                    {props.userLogin.userRole ===\"ADMIN\" && props.logged?<li><NavLink className={(navData) => (navData.isActive ? classes.active : '')} to='admin_all_projects'>\r\n                        Admin Projects\r\n                    </NavLink>\r\n                    </li>: \"\"}\r\n                    {props.userLogin.userRole ===\"ADMIN\" && props.logged?<li><NavLink className={(navData) => (navData.isActive ? classes.active : '')} to='admin_all_tasks'>\r\n                        Admin Tasks\r\n                    </NavLink>\r\n                    </li>: \"\"}\r\n                    <li>{props.logged ? <NavLink className={(navData) => (navData.isActive ? classes.active : \"\")}\r\n                                                 onClick={onClickLogoutUser} to={`/login`}>\r\n                        Logout\r\n                    </NavLink> : \"\"}\r\n                    </li>\r\n                </ul>\r\n            </nav>\r\n        </header>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = ({userLogin}: StoreState): { userLogin: User; } => {\r\n    return {userLogin}\r\n}\r\n\r\nexport const MainHeader = connect(\r\n    mapStateToProps,\r\n    {logoutUser}\r\n)(_MainHeader)\r\n","import React, {Fragment, useEffect, useState} from 'react';\r\n\r\nimport classes from './Layout.module.css';\r\nimport {MainHeader} from './MainHeader';\r\n\r\nconst Layout: React.FunctionComponent<{}> = (props) => {\r\n    const [logged , setLogged] = useState<boolean>(false)\r\n    useEffect(() => {\r\n        console.log(logged)\r\n    },[logged])\r\n\r\n    const changeLogged = (e: any) => {\r\n        setLogged(true);\r\n    }\r\n    return (\r\n        <Fragment>\r\n            <MainHeader logged = {logged} setLogged ={setLogged}/>\r\n            <main className={classes.main}>{props.children}</main>\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default Layout;","import React, {useState} from 'react';\r\nimport {loginUser, logoutUser, User} from \"../redux/actions\";\r\nimport {LoginType} from \"../redux/actions\";\r\nimport {StoreState} from \"../redux/reducers\";\r\nimport {connect} from \"react-redux\";\r\nimport {useNavigate} from 'react-router-dom';\r\n\r\n\r\ninterface LoginProps {\r\n    userLogin: User;\r\n    loginUser: Function;\r\n    logoutUser: Function\r\n}\r\n\r\nconst _Login: React.FunctionComponent<LoginProps> = (props) => {\r\n    const [username, setUsername] = useState<string>(\"\")\r\n    const [password, setPassword] = useState<string>(\"\")\r\n    const [warning,setWarning] = useState(\"\");\r\n    const navigate = useNavigate();\r\n\r\n\r\n    const handleChangeUserName = (e: any): void => {\r\n        setUsername(e.target.value)\r\n    }\r\n    const handleChangePassword = (e: any): void => {\r\n        setPassword(e.target.value)\r\n    }\r\n\r\n    const handleSubmitLogin = (e: any): void => {\r\n        e.preventDefault()\r\n        let user: LoginType = {\r\n            username,\r\n            password\r\n        }\r\n        props.loginUser(user)\r\n        if (sessionStorage.getItem(\"logged\") === \"true\"){\r\n            console.log(sessionStorage.getItem(\"logged\")    )\r\n            // @ts-ignore\r\n            navigate(`/login`,true)\r\n        }\r\n        if(props.userLogin.user_id === 0) {\r\n            setWarning(\"Please make sure the username and password correct\")\r\n        }\r\n    }\r\n    return (\r\n        <div>\r\n            <form onSubmit={handleSubmitLogin}>\r\n                <div className={\"text-danger\"}>{warning}</div>\r\n                <div className=\"form-group\">\r\n                    <label>Username:</label>\r\n                    <input type=\"text\" className=\"form-control\" value={username} onChange={handleChangeUserName} required/>\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label>Password:</label>\r\n                    <input type=\"text\" className=\"form-control\" value={password} onChange={handleChangePassword} required/>\r\n                </div>\r\n                <br/>\r\n                <input className=\"form-control btn btn-primary btn-block\" type=\"submit\" value=\"Submit\"/>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = ({userLogin}: StoreState): { userLogin: User } => {\r\n    return {userLogin}\r\n}\r\n\r\nexport const Login = connect(\r\n    mapStateToProps,\r\n    {logoutUser, loginUser}\r\n)(_Login)\r\n","import React, {useEffect, useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {LoginType, loginUser, User} from \"../redux/actions\";\r\nimport {StoreState} from \"../redux/reducers\";\r\nimport {connect} from \"react-redux\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport axios from \"axios\";\r\n\r\ninterface UserHomeComponentProps {\r\n    userLogin: User;\r\n}\r\n\r\nconst _UserHomeComponent: React.FunctionComponent<UserHomeComponentProps> = props => {\r\n    const [user_id, setUser_id] = useState(props.userLogin.user_id);\r\n    const [username, setUsername] = useState(props.userLogin.username);\r\n    const [password, setPassword] = useState(props.userLogin.password);\r\n    const [email, setEmail] = useState(props.userLogin.email);\r\n    const [firstname, setFirstname] = useState(props.userLogin.firstname);\r\n    const [lastname, setLastname] = useState(props.userLogin.lastname);\r\n    const [profpic, setProfpic] = useState(props.userLogin.profpic);\r\n    const [userRole, setUserRole] = useState(props.userLogin.userRole);\r\n    const [warning, setWarning] = useState(\"\");\r\n\r\n    const localDBUrl = `http://localhost:8090/api/users/update/`;\r\n\r\n    const renderPic = (): string => {\r\n        if (profpic == null || profpic === \"\") {\r\n            return \"https://ptracker-java-react.s3.us-east-2.amazonaws.com/images/profile.png\";\r\n        } else {\r\n            return \"https://ptracker-java-react.s3.us-east-2.amazonaws.com/images/\" + profpic;\r\n        }\r\n    }\r\n    useEffect(()=>{\r\n\r\n    },[props.userLogin])\r\n\r\n    const updateUser = async (e: any) => {\r\n        e.preventDefault()\r\n        let user: User = {\r\n            user_id,\r\n            email,\r\n            firstname,\r\n            lastname,\r\n            password,\r\n            profpic,\r\n            userRole,\r\n            username\r\n        }\r\n        let login :LoginType ={\r\n            username,\r\n            password\r\n        }\r\n        const resp = await axios.put<User>(localDBUrl+user_id, user);\r\n        console.log(resp.data)\r\n        if (resp.data.user_id !== 0) {\r\n            loginUser(login);\r\n            setWarning(resp.data.username + \" Was Updated!! \")\r\n        } else {\r\n            setWarning(\"User Coulndt be Updated!! something went wrong!!!\")\r\n        }\r\n    }\r\n\r\n    // @ts-ignore\r\n    return (\r\n\r\n        <div  key={props.userLogin.user_id}>\r\n            <div>\r\n                <form onSubmit={updateUser}>\r\n                    <h3>Update your information</h3>\r\n                    <h2>{warning}</h2>\r\n                    <div>\r\n                        <img src={renderPic()} alt=\"\"/>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label>User ID</label>\r\n                        <input type=\"text\" className=\"form-control\"\r\n                               value={user_id} name=\"user_id\" disabled/>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label>First name</label>\r\n                        <input type=\"text\" className=\"form-control\" onChange={(e) => setFirstname(e.target.value)}\r\n                               value={firstname} name=\"firstname\" required/>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label>Last name</label>\r\n                        <input type=\"text\" className=\"form-control\" placeholder=\"Last name\" value={lastname}\r\n                               onChange={(e) => setLastname(e.target.value)} name=\"lastname\" required/>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label>Username</label>\r\n                        <input type=\"text\" className=\"form-control\" placeholder=\"Username\" value={username}\r\n                               onChange={(e) => setUsername(e.target.value)} name=\"username\" required/>\r\n                    </div>\r\n\r\n                    <div className=\"form-group\">\r\n                        <label>Email address</label>\r\n                        <input type=\"email\" className=\"form-control\" placeholder=\"Enter email\" value={email}\r\n                               onChange={(e) => setEmail(e.target.value)} name=\"email\" required/>\r\n                    </div>\r\n\r\n                    <div className=\"form-group\">\r\n                        <label>Password</label>\r\n                        <input type=\"password\" className=\"form-control\" placeholder=\"Enter password\" value={password}\r\n                               onChange={(e) => setPassword(e.target.value)} name=\"password\" required/>\r\n                    </div>\r\n\r\n                    <div className=\"form-group\">\r\n                        <label>User Role</label>\r\n                        <select className={\"form-control\"} name=\"userRole\"\r\n                                onChange={event =>{\r\n                                    if (event.target.value === \"ADMIN\"){\r\n                                        setUserRole(\"ADMIN\");\r\n                                    }\r\n                                    if (event.target.value === \"ADMIN\"){\r\n                                        setUserRole(\"USER\")\r\n                                    }\r\n                                } } defaultValue={userRole}>\r\n                            <option value=\"ADMIN\">ADMIN</option>\r\n                            <option value=\"USER\">USER</option>\r\n                        </select>\r\n                    </div>\r\n                    <br/>\r\n                    <input type=\"submit\" className=\"form-control btn btn-primary btn-block\" value={\"Update User\"}/>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nconst mapStateToProps = ({userLogin}: StoreState): { userLogin: User } => {\r\n    return {userLogin}\r\n}\r\n\r\nexport const UserHomeComponent = connect(\r\n    mapStateToProps,\r\n    {}\r\n)(_UserHomeComponent)","import React, {useState} from 'react';\r\nimport * as FaIcons from 'react-icons/fa';\r\nimport * as AiIcons from 'react-icons/ai';\r\nimport {Link, NavLink} from 'react-router-dom';\r\nimport './Navbar.css';\r\nimport {IconContext} from 'react-icons';\r\n\r\nimport * as IoIcons from 'react-icons/io';\r\nimport {UserHomeComponent} from \"../UserHomeComponent\";\r\nimport classes from \"./MainHeader.module.css\";\r\n\r\n\r\nconst SideBar: React.FC<any> = ({updateClickedPage}: any) => {\r\n    const [sidebar, setSidebar] = useState(false);\r\n\r\n    const showSidebar = () => setSidebar(!sidebar);\r\n    // const onClickPageProfile = () => {\r\n    //     updateClickedPage(1)\r\n    // }\r\n\r\n    return (\r\n\r\n        <IconContext.Provider value={{color: '#b78d8d'}}>\r\n            <div className='navbar'>\r\n                <Link to='#' className='menu-bars'>\r\n                    <FaIcons.FaBars onClick={showSidebar}/>\r\n\r\n                </Link>\r\n            </div>\r\n            <nav className={sidebar ? 'nav-menu active' : 'nav-menu'}>\r\n                <ul className='nav-menu-items' onClick={showSidebar}>\r\n                    <li className='navbar-toggle'>\r\n                        <Link to='#' className='menu-bars'>\r\n                            <AiIcons.AiOutlineClose/>\r\n                        </Link>\r\n                    </li>\r\n                    {/*Mini Nav Options Start Here*/}\r\n                    <li className={\"nav-text\"}>\r\n                        <NavLink className={(navData) => (navData.isActive ? classes.active : '')} to={\"/home\"}>\r\n                            <AiIcons.AiFillProfile/>Profile\r\n                        </NavLink>\r\n                    </li>\r\n                    <li className={\"nav-text\"}>\r\n                        <NavLink className={(navData) => (navData.isActive ? classes.active : '')} to={\"/user_tasks\"}>\r\n                            <FaIcons.FaCartPlus/>Your Tasks\r\n                        </NavLink>\r\n                    </li>\r\n                    <li className={\"nav-text\"}>\r\n                        <NavLink className={(navData) => (navData.isActive ? classes.active : '')} to={\"/new_project\"}>\r\n                            <IoIcons.IoMdPeople/>New Project\r\n                        </NavLink>\r\n                    </li>\r\n                    <li className={\"nav-text\"}>\r\n                        <NavLink className={(navData) => (navData.isActive ? classes.active : '')} to={\"/new_task\"}>\r\n                            <FaIcons.FaEnvelopeOpenText/>New Task\r\n                        </NavLink>\r\n                    </li>\r\n                </ul>\r\n            </nav>\r\n        </IconContext.Provider>\r\n    );\r\n}\r\n\r\nexport default SideBar;","import React, {Fragment, useEffect, useRef, useState} from 'react';\r\nimport {StoreState} from \"../redux/reducers\";\r\nimport {connect} from \"react-redux\";\r\nimport {UserHomeComponent} from \"../component/UserHomeComponent\";\r\nimport {loginUser, logoutUser,User} from \"../redux/actions\";\r\nimport {Route, Routes} from 'react-router-dom';\r\nimport SideBar from \"../component/layout/SideBar\";\r\nimport classes from \"../component/layout/Layout.module.css\";\r\n\r\n\r\n\r\ninterface HomeProps{\r\n    userLogin: User;\r\n}\r\n\r\nconst _Home: React.FunctionComponent<HomeProps> = props => {\r\n    useEffect(() => {\r\n    },[])\r\n\r\n    return (\r\n        <div>\r\n            <SideBar/>\r\n            <section className={classes.sideBarContent}>\r\n                <UserHomeComponent/>\r\n            </section>\r\n        </div>\r\n    );\r\n}\r\nconst  mapStateToProps = ({userLogin}: StoreState):{userLogin : User;} => {\r\n    return {userLogin}\r\n}\r\n\r\nexport const Home = connect(\r\n    mapStateToProps,\r\n    {logoutUser,loginUser}\r\n)(_Home)","import React, {useEffect, useState} from 'react';\r\nimport {fetchAllUsers, loginUser, logoutUser, User} from \"../redux/actions\";\r\nimport {LoginType} from \"../redux/actions\";\r\nimport {StoreState} from \"../redux/reducers\";\r\nimport {connect} from \"react-redux\";\r\nimport {Card, Button, CardGroup, Row, Col} from 'react-bootstrap';\r\nimport classes from \"../component/layout/Layout.module.css\";\r\nimport axios from \"axios\";\r\n\r\n\r\ninterface AllUsersProps{\r\n    users: User[];\r\n    fetchAllUsers: Function;\r\n}\r\n\r\nconst _AdminAllUsers: React.FunctionComponent<AllUsersProps> = (props)=> {\r\n\r\n    const [user_id, setUser_id] = useState(0);\r\n    const [username, setUsername] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [email, setEmail] = useState(\"\");\r\n    const [firstname, setFirstname] = useState(\"\");\r\n    const [lastname, setLastname] = useState(\"\");\r\n    const [profpic, setProfpic] = useState(\"\");\r\n    const [userRole, setUserRole] = useState(\"\");\r\n    const [warning, setWarning] = useState(\"\");\r\n\r\n    const localDBUrl = `http://localhost:8090/api/users/update/`;\r\n\r\n    useEffect(()=>{\r\n\r\n    },[username])\r\n\r\n    const renderPic = (user:User)  => {\r\n        if (user.profpic == null){\r\n            return \"https://ptracker-java-react.s3.us-east-2.amazonaws.com/images/profile.png\";\r\n        }\r\n        if (user.profpic == \"\"){\r\n            return \"https://ptracker-java-react.s3.us-east-2.amazonaws.com/images/profile.png\";\r\n        }\r\n        else {\r\n            return \"https://ptracker-java-react.s3.us-east-2.amazonaws.com/images/\" + user.profpic;\r\n        }\r\n    }\r\n\r\n    let temp: User = {\r\n        user_id,\r\n        email,\r\n        firstname,\r\n        lastname,\r\n        password,\r\n        profpic,\r\n        userRole,\r\n        username\r\n    }\r\n\r\n    const updateUser = async (e: User|any) => {\r\n        e.preventDefault()\r\n        setUser_id(e.user_id)\r\n        let user: User = {\r\n            user_id,\r\n            email,\r\n            firstname,\r\n            lastname,\r\n            password,\r\n            profpic,\r\n            userRole,\r\n            username\r\n        }\r\n        const resp = await axios.put<User>(localDBUrl+user_id, user);\r\n        console.log(resp.data)\r\n        if (resp.data.user_id !== 0) {\r\n            setWarning(resp.data.username + \" Was Updated!! \")\r\n        } else {\r\n            setWarning(\"User Coulndt be Updated!! something went wrong!!!\")\r\n        }\r\n    }\r\n    const setUserToUpdateState = (user:User) =>{\r\n        setUser_id(user.user_id);\r\n        setEmail(user.email);\r\n        setFirstname(user.firstname);\r\n        setLastname(user.lastname);\r\n        setPassword(user.password);\r\n        setProfpic(user.profpic);\r\n        setUserRole(user.userRole);\r\n        setUsername(user.username);\r\n\r\n    }\r\n\r\n\r\n    const renderUpdateUserForm = () : JSX.Element => {\r\n        console.log(\"UpdateForm Called!!\")\r\n        return (\r\n            <div  key={user_id}>\r\n                <div>\r\n                    <form onSubmit={updateUser}>\r\n                        <h3>Update Users Information</h3>\r\n                        <h2>{warning}</h2>\r\n                        <div>\r\n                            <img src={profpic} alt=\"\"/>\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <label>User ID</label>\r\n                            <input type=\"text\" className=\"form-control\"\r\n                                   value={user_id} name=\"user_id\" disabled/>\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <label>First name</label>\r\n                            <input type=\"text\" className=\"form-control\" onChange={(e) => setFirstname(e.target.value)}\r\n                                   value={firstname} name=\"firstname\" required/>\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <label>Last name</label>\r\n                            <input type=\"text\" className=\"form-control\" placeholder=\"Last name\" value={lastname}\r\n                                   onChange={(e) => setLastname(e.target.value)} name=\"lastname\" required/>\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <label>Username</label>\r\n                            <input type=\"text\" className=\"form-control\" placeholder=\"Username\" value={username}\r\n                                   onChange={(e) => setUsername(e.target.value)} name=\"username\" required/>\r\n                        </div>\r\n\r\n                        <div className=\"form-group\">\r\n                            <label>Email address</label>\r\n                            <input type=\"email\" className=\"form-control\" placeholder=\"Enter email\" value={email}\r\n                                   onChange={(e) => setEmail(e.target.value)} name=\"email\" required/>\r\n                        </div>\r\n\r\n                        <div className=\"form-group\">\r\n                            <label>Password</label>\r\n                            <input type=\"password\" className=\"form-control\" placeholder=\"Enter password\" value={password}\r\n                                   onChange={(e) => setPassword(e.target.value)} name=\"password\" required/>\r\n                        </div>\r\n\r\n                        <div className=\"form-group\">\r\n                            <label>User Role</label>\r\n                            <select className={\"form-control\"} name=\"userRole\"\r\n                                    onChange={event =>{\r\n                                        if (event.target.value === \"ADMIN\"){\r\n                                            setUserRole(\"ADMIN\");\r\n                                        }\r\n                                        if (event.target.value === \"ADMIN\"){\r\n                                            setUserRole(\"USER\")\r\n                                        }\r\n                                    } } defaultValue={userRole}>\r\n                                <option value=\"ADMIN\">ADMIN</option>\r\n                                <option value=\"USER\">USER</option>\r\n                            </select>\r\n                        </div>\r\n                        <br/>\r\n                        <input type=\"submit\" className=\"form-control btn btn-primary btn-block\" value={\"Update User\"}/>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n\r\n        )\r\n    }\r\n\r\n    const renderUsers = () : JSX.Element[]=> {\r\n        return props.users.map((user: User) => {\r\n            // @ts-ignore\r\n            return (\r\n                <Col>\r\n                <Card key={user.user_id} style={{ width: '18rem' }}>\r\n                    <Card.Img variant=\"top\" src={renderPic(user)} />\r\n                    <Card.Body>\r\n                        <Card.Title>{user.username}</Card.Title>\r\n                        <Card.Text>\r\n                            FirstName = {user.firstname}\r\n                            LastName = {user.lastname}\r\n                        </Card.Text>\r\n                        <Button onClick={ ()=> setUserToUpdateState(user)} variant=\"primary\" >Update User</Button>\r\n                    </Card.Body>\r\n                </Card>\r\n                </Col>\r\n            );\r\n        });\r\n    }\r\n    const onClickFetchUsers = ():void => {\r\n        props.fetchAllUsers();\r\n    }\r\n\r\n    return (\r\n        <div className={classes.sideBarContent}>\r\n            <button onClick={onClickFetchUsers}>FETCH USERS</button>\r\n            {renderUpdateUserForm()}\r\n            <CardGroup>\r\n                <Row xs={2} md={\"auto\"} lg={\"auto\"} className=\"g-4\">\r\n                    {renderUsers()}\r\n                </Row>\r\n            </CardGroup>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nconst  mapStateToProps = ({users}: StoreState):{users : User[]} => {\r\n    return {users}\r\n}\r\n\r\nexport const AdminAllUsers = connect(\r\n    mapStateToProps,\r\n    {fetchAllUsers}\r\n)(_AdminAllUsers)\r\n","import axios from \"axios\";\r\nimport {Dispatch} from \"redux\";\r\nimport {ActionTypes} from \"./types\";\r\n\r\nconst urlApi = `http://52.14.40.145:8080/api/users/all` ;\r\nconst localDBUrl = `http://localhost:8090/api/users/all`;\r\n\r\nexport interface User{\r\n    user_id: number;\r\n    email: string;\r\n    firstname: string;\r\n    lastname : string;\r\n    password : string;\r\n    profpic  : string;\r\n    userRole: string;\r\n    username : string;\r\n    user_projects?: [];\r\n    user_tasks?: [];\r\n}\r\nexport interface FetchAllUsersAction{\r\n    type: ActionTypes.fetchaAllUsers;\r\n    payload: User[];\r\n}\r\n\r\nexport const fetchAllUsers = () => {\r\n    return async (dispatch: Dispatch) => {\r\n        const resp = await axios.get<User[]>(localDBUrl)\r\n        dispatch<FetchAllUsersAction>({\r\n            type: ActionTypes.fetchaAllUsers,\r\n            payload: resp.data\r\n        })\r\n    }\r\n}","import React, {Component, useState} from \"react\";\r\nimport {loginUser, logoutUser, User} from \"../redux/actions\";\r\nimport {StoreState} from \"../redux/reducers\";\r\nimport {connect} from \"react-redux\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport axios from \"axios\";\r\n\r\n\r\ninterface SignupProps {\r\n    userLogin: User;\r\n}\r\n\r\nconst _Signup: React.FunctionComponent<SignupProps> = (props) => {\r\n    const [username, setUsername] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [email, setEmail] = useState(\"\");\r\n    const [firstname, setFirstname] = useState(\"\");\r\n    const [lastname, setLastname] = useState(\"\");\r\n    const [warning, setWarning] = useState(\"\");\r\n\r\n    const localDBUrl = `http://localhost:8090/api/users/save`;\r\n    const signUpUser = async (e: any) => {\r\n        e.preventDefault()\r\n        let user: User = {\r\n            user_id: 0,\r\n            email,\r\n            firstname,\r\n            lastname,\r\n            password,\r\n            profpic: \"\",\r\n            userRole: \"USER\",\r\n            username\r\n        }\r\n        const resp = await axios.post<User>(localDBUrl, user);\r\n        if (resp.data.user_id !== 0) {\r\n            setWarning(resp.data.username + \" Was Created You May Login Now\")\r\n        } else {\r\n            setWarning(\"User Coulndt be Created something went wrong!!!\")\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <form onSubmit={signUpUser}>\r\n                <h3>Sign Up</h3>\r\n                <h2>{warning}</h2>\r\n                <div className=\"form-group\">\r\n                    <label>First name</label>\r\n                    <input type=\"text\" className=\"form-control\" onChange={(e) => setFirstname(e.target.value)}\r\n                           placeholder=\"First name\" name=\"firstname\" required/>\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label>Last name</label>\r\n                    <input type=\"text\" className=\"form-control\" placeholder=\"Last name\"\r\n                           onChange={(e) => setLastname(e.target.value)} name=\"lastname\" required/>\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label>Username</label>\r\n                    <input type=\"text\" className=\"form-control\" placeholder=\"Username\"\r\n                           onChange={(e) => setUsername(e.target.value)} name=\"username\" required/>\r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n                    <label>Email address</label>\r\n                    <input type=\"email\" className=\"form-control\" placeholder=\"Enter email\"\r\n                           onChange={(e) => setEmail(e.target.value)} name=\"email\" required/>\r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n                    <label>Password</label>\r\n                    <input type=\"password\" className=\"form-control\" placeholder=\"Enter password\"\r\n                           onChange={(e) => setPassword(e.target.value)} name=\"password\" required/>\r\n                </div>\r\n                <br/>\r\n                <input type=\"submit\" className=\"form-control btn btn-primary btn-block\" value={\"Sign up\"}/>\r\n                <p className=\"forgot-password text-right\">\r\n                    Already registered <NavLink to={\"/login\"}>sign in?</NavLink>\r\n                </p>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = ({userLogin}: StoreState): { userLogin: User } => {\r\n    return {userLogin}\r\n}\r\n\r\nexport const Signup = connect(\r\n    mapStateToProps,\r\n    {}\r\n)(_Signup)","import React, {useEffect, useState} from 'react';\r\nimport {fetchAllProjects, loginUser, Project, Task, User} from \"../redux/actions\";\r\nimport {StoreState} from \"../redux/reducers\";\r\nimport {connect} from \"react-redux\";\r\nimport {Card, Button, CardGroup, Row, Col} from 'react-bootstrap';\r\nimport classes from \"../component/layout/Layout.module.css\";\r\nimport axios from \"axios\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport SideBar from \"../component/layout/SideBar\";\r\n\r\n\r\ninterface UserTasksProps{\r\n    users: User[];\r\n    project: Project[];\r\n    userLogin: User;\r\n    fetchAllProjects: Function;\r\n}\r\nexport interface FullUserProjectTasks {\r\n    user_id: number;\r\n    email: string;\r\n    firstname: string;\r\n    lastname : string;\r\n    password : string;\r\n    profpic  : string;\r\n    userRole: string;\r\n    username : string;\r\n    user_projects : Project[];\r\n    user_tasks : Task[];\r\n}\r\n\r\n\r\nconst _UserTasks: React.FunctionComponent<UserTasksProps> = (props)=> {\r\n\r\n    const [task_note, setTask_note] = useState(\"\");\r\n\r\n    const [warning, setWarning] = useState(\"\");\r\n\r\n    const localDBUrl = `http://localhost:8090/api/task/update/`;\r\n    const localDBUrlUserProjectsTasks = `http://localhost:8090/api/users/`;\r\n\r\n    let fullUser:FullUserProjectTasks = {\r\n        email: \"\",\r\n        firstname: \"\",\r\n        lastname: \"\",\r\n        password: \"\",\r\n        profpic: \"\",\r\n        userRole: \"\",\r\n        user_id: 0,\r\n        user_projects: [],\r\n        user_tasks: [],\r\n        username: \"\"\r\n\r\n    }\r\n    const [finsh,setFinish] = useState(false);\r\n    let taskToFinish:Task = {\r\n        task_description: \"\", task_end_date: \"\", task_id: 0, task_note: \"\", task_start_date: \"\"\r\n    }\r\n\r\n\r\n    useEffect(()=>{\r\n        console.log(props.userLogin)\r\n    },[finsh])\r\n\r\n\r\n\r\n    const finishTask = async (e: Task|any) => {\r\n        // e.preventDefault()\r\n        const resp = await axios.put<Task>(localDBUrl+taskToFinish.task_id, taskToFinish);\r\n        console.log(resp.data)\r\n        if (resp.data.task_id !== 0) {\r\n            setWarning(resp.data.task_description + \" Was Updated!! \")\r\n        } else {\r\n            setWarning(\"Task Couldn't be Updated!! something went wrong!!!\")\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    const renderUserProjects = () : JSX.Element[]=> {\r\n        // @ts-ignore\r\n        return props.userLogin.user_projects.map((project: Project) => {\r\n            // @ts-ignore\r\n            return (\r\n                <Col>\r\n                    <Card key={project.project_id} style={{ width: '18rem' }}>\r\n                        <Card.Body>\r\n                            {warning}\r\n                            <Card.Title>{project.project_name}</Card.Title>\r\n                            <Card.Text>\r\n                                Project Start :{project.start_project_date}\r\n                                <br/>\r\n                                Project End Date: {project.end_project_date}\r\n                            </Card.Text>\r\n                            <Button variant=\"danger\" >Check in with your PM to Update</Button>\r\n                        </Card.Body>\r\n                    </Card>\r\n                </Col>\r\n            );\r\n        });\r\n    }\r\n\r\n    const renderUserTasks = () : JSX.Element[]=> {\r\n        // @ts-ignore\r\n        return props.userLogin.user_tasks.map((task: Task) => {\r\n            // @ts-ignore\r\n            return (\r\n                <Col>\r\n                    <Card key={task.task_id} style={{ width: '18rem' }}>\r\n                        <Card.Body>\r\n                            <Card.Title>{task.task_description}</Card.Title>\r\n                            <Card.Subtitle>Note: {task.task_note}</Card.Subtitle>\r\n                            <Card.Text>\r\n                                Start Date :{task.task_start_date}\r\n                                <br/>\r\n                                Due Date: {task.task_end_date}\r\n                            </Card.Text>\r\n                            <div className=\"form-group\">\r\n                                <label>Task Notes</label>\r\n                                <input type=\"text\" className=\"form-control\" onChange={(e) => setTask_note(e.target.value)}\r\n                                        name=\"task_note\" required/>\r\n                            </div>\r\n                            <Button onClick={ ()=> {\r\n                                taskToFinish.task_id = task.task_id;\r\n                                taskToFinish.task_description = task.task_description;\r\n                                taskToFinish.task_start_date = task.task_start_date;\r\n                                taskToFinish.task_end_date = task.task_end_date;\r\n                                taskToFinish.task_note = task_note;\r\n                                finishTask(taskToFinish);\r\n                            }} variant=\"primary\" >Finish Task</Button>\r\n                        </Card.Body>\r\n                    </Card>\r\n                </Col>\r\n            );\r\n        });\r\n    }\r\n\r\n    const onClickFetchUserProjectsAndTasks =async () =>  {\r\n        const resp = await axios.get<FullUserProjectTasks>(localDBUrlUserProjectsTasks+props.userLogin.user_id);\r\n        fullUser = resp.data;\r\n        setFinish(true);\r\n    }\r\n\r\n    return (\r\n        <section>\r\n            <SideBar/>\r\n            <div className={classes.sideBarContent}>\r\n                <button onClick={onClickFetchUserProjectsAndTasks}>FETCH All Current User Projects and Tasks!!</button>\r\n                <hr/>\r\n                <h1 className={\"text-center\"}>User Projects</h1>\r\n                <CardGroup>\r\n                    <Row xs={2} md={\"auto\"} lg={\"auto\"} className=\"g-4\">\r\n                        {renderUserProjects()}\r\n                    </Row>\r\n                </CardGroup>\r\n                <hr/>\r\n                <br/>\r\n                <h1 className={\"text-center\"}>User Tasks</h1>\r\n                <CardGroup>\r\n                    <Row xs={2} md={\"auto\"} lg={\"auto\"} className=\"g-4\">\r\n                        {renderUserTasks()}\r\n                    </Row>\r\n                </CardGroup>\r\n            </div>\r\n        </section>\r\n\r\n    );\r\n}\r\n\r\n\r\nconst  mapStateToProps = ({users, project,userLogin} : StoreState):{users: User[];project: Project[]; userLogin : User} => {\r\n    return {users, project,userLogin}\r\n}\r\n\r\nexport const UserTasks = connect(\r\n    mapStateToProps,\r\n    {fetchAllProjects}\r\n)(_UserTasks)\r\n","import React, {Component, useState} from \"react\";\r\nimport { Project} from \"../redux/actions\";\r\nimport {StoreState} from \"../redux/reducers\";\r\nimport {connect} from \"react-redux\";\r\nimport axios from \"axios\";\r\nimport SideBar from \"../component/layout/SideBar\";\r\nimport classes from \"../component/layout/Layout.module.css\";\r\nimport DatePicker from \"react-datepicker\"\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\n\r\n\r\n\r\ninterface NewProjectProps {\r\n    project : Project[]\r\n}\r\n\r\nconst _NewProject: React.FunctionComponent<NewProjectProps> = (props) => {\r\n    const [project_id, setProject_id] = useState(0);\r\n    const [project_name, setProject_name] = useState(\"\");\r\n    const [startDate, setStartDate] = useState(new Date());\r\n    const [endDate, setEndtDate] = useState(new Date());\r\n    const [warning, setWarning] = useState(\"\");\r\n\r\n    const localDBUrl = `http://localhost:8090/api/project/save`;\r\n    const urlApi = `http://52.14.40.145:8080/api/project/save` ;\r\n\r\n    const saveProject = async (e: any) => {\r\n        e.preventDefault()\r\n        let temp: any = {\r\n            project_id,\r\n            project_name,\r\n            start_project_date : startDate,\r\n            end_project_date : endDate\r\n        }\r\n        const resp = await axios.post<Project>(localDBUrl, temp);\r\n        if (resp.data.project_id !== 0) {\r\n            setWarning(resp.data.project_name + \" Was Created\")\r\n        } else {\r\n            setWarning(\"Project Couldn't be Created something went wrong!!!\")\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <SideBar/>\r\n            <section className={classes.sideBarContent}>\r\n                <form onSubmit={saveProject}>\r\n                    <h3>New Project</h3>\r\n                    <h2>{warning}</h2>\r\n                    <div className=\"form-group\">\r\n                        <label>Project name</label>\r\n                        <input type=\"text\" className=\"form-control\" onChange={(e) => setProject_name(e.target.value)}\r\n                               placeholder=\"Project name\" name=\"pro\" required/>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label>Start Date</label>\r\n                        <DatePicker\r\n                            closeOnScroll={true}\r\n                            selected={startDate}\r\n                            onChange={(date:Date) => setStartDate(date)}\r\n                        />\r\n                         </div>\r\n                    <div className=\"form-group\">\r\n                        <label>End Date</label>\r\n                        <DatePicker\r\n                            closeOnScroll={true}\r\n                            selected={endDate}\r\n                            onChange={(date:Date) => setEndtDate(date)}\r\n                        />\r\n                    </div>\r\n                    <br/>\r\n                    <input type=\"submit\" className=\"form-control btn btn-primary btn-block\" value={\"Create Project\"}/>\r\n                </form>\r\n            </section>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = ({project}: StoreState): { project: Project[] } => {\r\n    return {project}\r\n}\r\n\r\nexport const NewProject = connect(\r\n    mapStateToProps,\r\n    {}\r\n)(_NewProject)","import React, {Component, useState} from \"react\";\r\nimport {Project, Task} from \"../redux/actions\";\r\nimport {StoreState} from \"../redux/reducers\";\r\nimport {connect} from \"react-redux\";\r\nimport axios from \"axios\";\r\nimport SideBar from \"../component/layout/SideBar\";\r\nimport classes from \"../component/layout/Layout.module.css\";\r\nimport DatePicker from \"react-datepicker\";\r\n\r\n\r\ninterface NewTaskProps {\r\n    task : Task[]\r\n}\r\n\r\nconst _NewTask: React.FunctionComponent<NewTaskProps> = (props) => {\r\n    const [task_id, setTask_id] = useState(0);\r\n    const [task_description, setTask_description] = useState(\"\");\r\n    const [task_note, setTask_note] = useState(\"\");\r\n    const [task_start_date, setTask_start_date] = useState(new Date());\r\n    const [task_end_date, setTask_end_date] = useState(new Date());\r\n    const [warning, setWarning] = useState(\"\");\r\n\r\n    const localDBUrl = `http://localhost:8090/api/task/save`;\r\n    const saveTask = async (e: any) => {\r\n        e.preventDefault()\r\n        let task: any = {\r\n            task_id,\r\n            task_description,\r\n            task_note,\r\n            task_start_date,\r\n            task_end_date\r\n        }\r\n        const resp = await axios.post<Task>(localDBUrl, task);\r\n        if (resp.data.task_id !== 0) {\r\n            setWarning(resp.data.task_description+ \" Was Created\")\r\n        } else {\r\n            setWarning(\"Task Couldn't be Created something went wrong!!!\")\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <SideBar/>\r\n            <section className={classes.sideBarContent}>\r\n                <form onSubmit={saveTask}>\r\n                    <h3>New Task</h3>\r\n                    <h2>{warning}</h2>\r\n                    <div className=\"form-group\">\r\n                        <label>Task Description</label>\r\n                        <input type=\"text\" className=\"form-control\" onChange={(e) => setTask_description(e.target.value)}\r\n                               placeholder=\"Task Description\" name=\"task_description\" required/>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label>Task Note</label>\r\n                        <input type=\"text\" className=\"form-control\" onChange={(e) => setTask_note(e.target.value)}\r\n                               placeholder=\"Task Note\" name=\"task_note\" required/>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label>Start Date</label>\r\n                        <DatePicker\r\n                            closeOnScroll={true}\r\n                            selected={task_start_date}\r\n                            onChange={(date:Date) => setTask_start_date(date)}\r\n                        />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label>End Date</label>\r\n                        <DatePicker\r\n                            closeOnScroll={true}\r\n                            selected={task_end_date}\r\n                            onChange={(date:Date) => setTask_end_date(date)}\r\n                        />\r\n                    </div>\r\n                    <br/>\r\n                    <input type=\"submit\" className=\"form-control btn btn-primary btn-block\" value={\"Create Task!\"}/>\r\n                </form>\r\n            </section>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = ({task}: StoreState): { task: Task[] } => {\r\n    return {task}\r\n}\r\n\r\nexport const NewTask = connect(\r\n    mapStateToProps,\r\n    {}\r\n)(_NewTask)","import React, {useEffect, useState} from 'react';\r\nimport {fetchAllProjects, Project, User} from \"../redux/actions\";\r\nimport {StoreState} from \"../redux/reducers\";\r\nimport {connect} from \"react-redux\";\r\nimport {Card, Button, CardGroup, Row, Col} from 'react-bootstrap';\r\nimport classes from \"../component/layout/Layout.module.css\";\r\nimport axios from \"axios\";\r\nimport DatePicker from \"react-datepicker\";\r\n\r\n\r\ninterface AdminAllProjectsProps{\r\n    users: User[];\r\n    project: Project[];\r\n    fetchAllProjects: Function;\r\n}\r\n\r\nconst _AdminAllProjects: React.FunctionComponent<AdminAllProjectsProps> = (props)=> {\r\n\r\n    const [project_id, setProject_id] = useState(0);\r\n    const [project_name, setProject_name] = useState(\"\");\r\n    const [startDate, setStartDate] = useState(new Date());\r\n    const [endDate, setEndtDate] = useState(new Date());\r\n    const [warning, setWarning] = useState(\"\");\r\n\r\n    const localDBUrl = `http://localhost:8090/api/project/update/`;\r\n\r\n    useEffect(()=>{\r\n\r\n    },[project_name])\r\n\r\n\r\n    let temp: any = {\r\n        project_id,\r\n        project_name,\r\n        start_project_date : startDate,\r\n        end_project_date : endDate\r\n    }\r\n\r\n    const updateProject = async (e: Project|any) => {\r\n        e.preventDefault()\r\n        setProject_id(e.project_id)\r\n        let project: any = {\r\n            project_id,\r\n            project_name,\r\n            start_project_date : startDate,\r\n            end_project_date : endDate\r\n        }\r\n        const resp = await axios.put<Project>(localDBUrl+project_id, project);\r\n        console.log(resp.data)\r\n        if (resp.data.project_id !== 0) {\r\n            setWarning(resp.data.project_name + \" Was Updated!! \")\r\n        } else {\r\n            setWarning(\"Project Couldn't be Updated!! something went wrong!!!\")\r\n        }\r\n    }\r\n    const setProjectToUpdateState = (project:any) =>{\r\n        setProject_id(project.project_id);\r\n        setProject_name(project.project_name);\r\n        // @ts-ignore\r\n        setStartDate(Date.parse(project.start_project_date));\r\n        // @ts-ignore\r\n        setEndtDate(Date.parse(project.end_project_date));\r\n    }\r\n\r\n\r\n    const renderUpdateProjectForm = () : JSX.Element => {\r\n        console.log(\"Update Project Form Called!!\")\r\n        return (\r\n            <div  key={project_id}>\r\n                <div>\r\n                    <form onSubmit={updateProject}>\r\n                        <h3>Update Project Information</h3>\r\n                        <h2>{warning}</h2>\r\n                        <div className=\"form-group\">\r\n                            <label>Project ID</label>\r\n                            <input type=\"text\" className=\"form-control\"\r\n                                   value={project_id} name=\"user_id\" disabled/>\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <label>Project name</label>\r\n                            <input type=\"text\" className=\"form-control\" onChange={(e) => setProject_name(e.target.value)}\r\n                                   value={project_name} name=\"projectname\" required/>\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <label>Start Date</label>\r\n                            <DatePicker\r\n                                closeOnScroll={true}\r\n                                selected={startDate}\r\n                                onChange={(date:Date) => setStartDate(date)}\r\n                            />\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <label>End Date</label>\r\n                            <DatePicker\r\n                                closeOnScroll={true}\r\n                                selected={endDate}\r\n                                onChange={(date:Date) => setEndtDate(date)}\r\n                            />\r\n                        </div>\r\n                        <br/>\r\n                        <input type=\"submit\" className=\"form-control btn btn-primary btn-block\" value={\"Update Project\"}/>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n\r\n        )\r\n    }\r\n\r\n    const renderProjects = () : JSX.Element[]=> {\r\n        return props.project.map((project: Project) => {\r\n            // @ts-ignore\r\n            return (\r\n                <Col>\r\n                    <Card key={project.project_id} style={{ width: '18rem' }}>\r\n                        <Card.Body>\r\n                            <Card.Title>{project.project_name}</Card.Title>\r\n                            <Card.Text>\r\n                                Project Start :{project.start_project_date}\r\n                                <br/>\r\n                                Project End Date: {project.end_project_date}\r\n                            </Card.Text>\r\n                            <Button onClick={ ()=> setProjectToUpdateState(project)} variant=\"primary\" >Update Project</Button>\r\n                        </Card.Body>\r\n                    </Card>\r\n                </Col>\r\n            );\r\n        });\r\n    }\r\n    const onClickFetchProjects = ():void => {\r\n        props.fetchAllProjects();\r\n    }\r\n\r\n    return (\r\n        <div className={classes.sideBarContent}>\r\n            <button onClick={onClickFetchProjects}>FETCH All Projects</button>\r\n            {renderUpdateProjectForm()}\r\n            <CardGroup>\r\n                <Row xs={2} md={\"auto\"} lg={\"auto\"} className=\"g-4\">\r\n                    {renderProjects()}\r\n                </Row>\r\n            </CardGroup>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nconst  mapStateToProps = ({users, project}: StoreState):{users : User[]; project : Project[]} => {\r\n    return {users, project}\r\n}\r\n\r\nexport const AdminAllProjects = connect(\r\n    mapStateToProps,\r\n    {fetchAllProjects}\r\n)(_AdminAllProjects)\r\n","import React, {useEffect, useState} from 'react';\r\nimport {fetchAllProjects, fetchAllTasks, Project, Task, User} from \"../redux/actions\";\r\nimport {StoreState} from \"../redux/reducers\";\r\nimport {connect} from \"react-redux\";\r\nimport {Card, Button, CardGroup, Row, Col} from 'react-bootstrap';\r\nimport classes from \"../component/layout/Layout.module.css\";\r\nimport axios from \"axios\";\r\nimport DatePicker from \"react-datepicker\";\r\n\r\n\r\ninterface AdminAllTasksProps{\r\n    users: User[];\r\n    task: Task[];\r\n    fetchAllTasks: Function;\r\n}\r\n\r\nconst _AdminAllTasks: React.FunctionComponent<AdminAllTasksProps> = (props)=> {\r\n\r\n    const [task_id, setTask_id] = useState(0);\r\n    const [task_description, setTask_description] = useState(\"\");\r\n    const [task_note, setTask_note] = useState(\"\");\r\n    const [task_start_date, setTask_start_date] = useState(new Date());\r\n    const [task_end_date, setTask_end_date] = useState(new Date());\r\n    const [warning, setWarning] = useState(\"\");\r\n\r\n    const localDBUrl = `http://localhost:8090/api/project/update/`;\r\n\r\n    useEffect(()=>{\r\n\r\n    },[task_note])\r\n\r\n\r\n    let temp: any = {\r\n        task_id,\r\n        task_description,\r\n        task_note,\r\n        task_start_date,\r\n        task_end_date\r\n    }\r\n\r\n\r\n    const updateTask = async (e: Task|any) => {\r\n        e.preventDefault()\r\n        setTask_id(e.task_id)\r\n        let task: any = {\r\n            task_id,\r\n            task_description,\r\n            task_note,\r\n            task_start_date,\r\n            task_end_date\r\n        }\r\n        const resp = await axios.put<Task>(localDBUrl+task_id, task);\r\n        console.log(resp.data)\r\n        if (resp.data.task_id !== 0) {\r\n            setWarning(resp.data.task_description + \" Was Updated!! \")\r\n        } else {\r\n            setWarning(\"Task Couldn't be Updated!! something went wrong!!!\")\r\n        }\r\n    }\r\n    const setTaskToUpdateState = (task:any) =>{\r\n        setTask_id(task.task_id);\r\n        setTask_description(task.task_description);\r\n        setTask_note(task.task_note);\r\n        // @ts-ignore\r\n        setTask_start_date(Date.parse(project.start_project_date));\r\n        // @ts-ignore\r\n        setTask_end_date(Date.parse(project.end_project_date));\r\n    }\r\n\r\n\r\n    const renderUpdateTaskForm = () : JSX.Element => {\r\n        console.log(\"Update Task Form Called!!\")\r\n        return (\r\n            <div  key={task_id}>\r\n                <div>\r\n                    <form onSubmit={updateTask}>\r\n                        <h3>Update Task!</h3>\r\n                        <h2>{warning}</h2>\r\n                        <div className=\"form-group\">\r\n                            <label>Project ID</label>\r\n                            <input type=\"text\" className=\"form-control\"\r\n                                   value={task_id} name=\"task_id\" disabled/>\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <label>Task Description</label>\r\n                            <input type=\"text\" className=\"form-control\" onChange={(e) => setTask_description(e.target.value)}\r\n                                   value={task_description} name=\"task_description\" required/>\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <label>Task Notes</label>\r\n                            <input type=\"text\" className=\"form-control\" onChange={(e) => setTask_note(e.target.value)}\r\n                                   value={task_note} name=\"task_note\" required/>\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <label>Start Date</label>\r\n                            <DatePicker\r\n                                closeOnScroll={true}\r\n                                selected={task_start_date}\r\n                                onChange={(date:Date) => setTask_start_date(date)}\r\n                            />\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <label>End Date</label>\r\n                            <DatePicker\r\n                                closeOnScroll={true}\r\n                                selected={task_end_date}\r\n                                onChange={(date:Date) => setTask_end_date(date)}\r\n                            />\r\n                        </div>\r\n                        <br/>\r\n                        <input type=\"submit\" className=\"form-control btn btn-primary btn-block\" value={\"Update Project\"}/>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n\r\n        )\r\n    }\r\n\r\n    const renderTasks = () : JSX.Element[]=> {\r\n        return props.task.map((task: Task) => {\r\n            // @ts-ignore\r\n            return (\r\n                <Col>\r\n                    <Card key={task.task_id} style={{ width: '18rem' }}>\r\n                        <Card.Body>\r\n                            <Card.Title>{task.task_description}</Card.Title>\r\n                            <Card.Subtitle>{task.task_note}</Card.Subtitle>\r\n                            <Card.Text>\r\n                                Task Start :{task.task_start_date}\r\n                                <br/>\r\n                                Task End Date: {task.task_end_date}\r\n                            </Card.Text>\r\n                            <Button onClick={ ()=> setTaskToUpdateState(task)} variant=\"primary\" >Update Task</Button>\r\n                        </Card.Body>\r\n                    </Card>\r\n                </Col>\r\n            );\r\n        });\r\n    }\r\n    const onClickFetchTasks = ():void => {\r\n        props.fetchAllTasks();\r\n    }\r\n\r\n    return (\r\n        <div className={classes.sideBarContent}>\r\n            <button onClick={onClickFetchTasks}>FETCH All Tasks</button>\r\n            {renderUpdateTaskForm()}\r\n            <CardGroup>\r\n                <Row xs={2} md={\"auto\"} lg={\"auto\"} className=\"g-4\">\r\n                    {renderTasks()}\r\n                </Row>\r\n            </CardGroup>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nconst  mapStateToProps = ({users, task}: StoreState):{users : User[]; task : Task[]} => {\r\n    return {users, task}\r\n}\r\n\r\nexport const AdminAllTasks = connect(\r\n    mapStateToProps,\r\n    {fetchAllTasks}\r\n)(_AdminAllTasks)\r\n","import axios from \"axios\";\r\nimport {Dispatch} from \"redux\";\r\nimport {ActionTypes} from \"./types\";\r\n\r\n//const urlApi = `http://52.14.40.145:8080/api/project/all` ;\r\nconst localDBUrl = `http://localhost:8090/api/task/all`;\r\n\r\nexport interface Task{\r\n    task_id: number;\r\n    task_description: string;\r\n    task_note: string;\r\n    task_start_date: string;\r\n    task_end_date : string;\r\n}\r\nexport interface FetchAllTasksAction {\r\n    type: ActionTypes.fetchaAllTasks;\r\n    payload: Task[];\r\n}\r\n\r\nexport const fetchAllTasks = () => {\r\n    return async (dispatch: Dispatch) => {\r\n        const resp = await axios.get<Task[]>(localDBUrl)\r\n        dispatch<FetchAllTasksAction>({\r\n            type: ActionTypes.fetchaAllTasks,\r\n            payload: resp.data\r\n        })\r\n    }\r\n}","import React from \"react\";\r\nimport {Route, Routes, Navigate} from 'react-router-dom';\r\nimport Layout from \"./component/layout/Layout\";\r\nimport {Login} from \"./component/Login\";\r\nimport {Home} from \"./pages/Home\";\r\nimport {AdminAllUsers} from \"./pages/AdminAllUsers\";\r\nimport {Signup} from \"./component/Signup\";\r\nimport \"./application.css\"\r\nimport {UserTasks} from \"./pages/UserTasks\";\r\nimport {NewProject} from \"./pages/NewProject\";\r\nimport {NewTask} from \"./pages/NewTask\";\r\nimport {AdminAllProjects} from \"./pages/AdminAllProjects\";\r\nimport {AdminAllTasks} from \"./pages/AdminAllTasks\";\r\n\r\nconst Application: React.FunctionComponent<{}> = props => {\r\n\r\n    return (\r\n        <Layout>\r\n            <Routes>\r\n                <Route path='/' element={<Navigate replace to='/login'/>}/>\r\n                <Route path='/login' element={<Login/>}/>\r\n                <Route path='/signup' element={<Signup/>}/>\r\n                <Route path='/home' element={<Home/>}/>\r\n                <Route path='/admin_all_users' element={<AdminAllUsers/>}/>\r\n                <Route path='/admin_all_projects' element={<AdminAllProjects/>}/>\r\n                <Route path={\"/admin_all_tasks\"} element={<AdminAllTasks/>}/>\r\n                <Route path={\"/user_tasks\"} element={<UserTasks/>}/>\r\n                <Route path={\"/new_project\"} element={<NewProject/>}/>\r\n                <Route path={\"/new_task\"} element={<NewTask/>}/>\r\n                {/*<Route path='*' element={<NotFound />} />*/}\r\n            </Routes>\r\n        </Layout>\r\n    );\r\n}\r\n\r\nexport default Application;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter as Router, Route, Link, BrowserRouter} from 'react-router-dom';\nimport {Provider} from \"react-redux\"\nimport './index.css';\nimport {App} from './App';\nimport {createStore , applyMiddleware} from \"redux\";\nimport thunk from \"redux-thunk\";\nimport {reducers} from \"./redux/reducers\";\nimport {compose} from \"redux\";\nimport Application from \"./application\";\n\n\nconst store = createStore(reducers,compose(applyMiddleware(thunk)))\n\nReactDOM.render(\n    <Provider store={store}>\n        <BrowserRouter >\n            <Application/>\n        </BrowserRouter>\n    </Provider>\n    ,\n  document.getElementById('root')\n);\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"MainHeader_header__26rKk\",\"active\":\"MainHeader_active__aTJyT\"};"],"sourceRoot":""}